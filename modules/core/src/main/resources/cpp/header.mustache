#pragma once
#include "ModelBase.hpp"

#include <string>
#include <vector>

{{#getDependencies}}
{{{dependency}}}
{{/getDependencies}}

{{#additionalProperties}}
{{#namespace}}namespace {{namespace}} { {{/namespace}}
{{/additionalProperties}}

class {{{modelName}}} : public ModelBase {
public:
    {{{modelName}}}() = default;

    {{#members}}
    /* m_{{{name}}} accessors */
    {{#isPrimitive}}
    {{{dataType}}} {{{getterName}}}() const;
    void {{{setterName}}}({{{dataType}}} value);
    {{/isPrimitive}}
    {{^isPrimitive}}
    const {{{dataType}}}& {{{getterName}}}() const;
    void {{{setterName}}}(const {{{dataType}}}& value);
    {{/isPrimitive}}

    {{/members}}
    bool Serialize(rapidjson::Writer<rapidjson::StringBuffer>& writer) const override;
    bool Deserialize(const rapidjson::Value& obj) override;
private:
    {{#members}}

    /* {{{description}}} */
    {{{dataType}}} m_{{{name}}}{};
    {{/members}}
};

{{#additionalProperties}}
{{#namespace}}} //namespace {{namespace}} {{/namespace}}
{{/additionalProperties}}
